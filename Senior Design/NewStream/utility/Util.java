package utility;

import java.util.ArrayList;
import java.util.List;

import manager.ILogger;
import manager.Manager;

import database.Article;


/**
 * Contains static utility methods.
 * @author Jamison Bradley
 */
public class Util {

	/**
	 * Checks to make sure the Article object created by the parse method of an implementation of PageParser doesn't have any null fields.
	 * If is does it logs the error.
	 * @param article that was generated by the parser method of an implementation of PageParser.
	 * @return The Article article that was passed in as an argument of the method if there are no null fields and null if a null field was found.
	 */
	public static Article checkForErrorPageParser(Article article, String source){
		//check for problems finding information and log the errors if any are found null should be returned
		ILogger log = Manager.getLogger();
		StringBuilder message = new StringBuilder(500);
		boolean error = false;
		if (article.getCategory() == null){
			error = true;
			message.append("Problem with ");
			message.append(article.getUrl());
			message.append("\nWas unable to find category information");
		}
		
		if (article.getDate() == null){
			if (error){
				message.append("\n");
			}
			else{
				error = true;
				message.append("Problem with ");
				message.append(article.getUrl());
				message.append("\n");
			}
			message.append("Was unable to find date information");
		}
		
		if (article.getLocation() == null){
			if (error){
				message.append("\n");
			}
			else{
				error = true;
				message.append("Problem with ");
				message.append(article.getUrl());
				message.append("\n");
			}
			message.append("Was unable to find location information");
		}

		if (article.getTitle() == null){
			if (error){
				message.append("\n");
			}
			else{
				error = true;
				message.append("Problem with ");
				message.append(article.getUrl());
				message.append("\n");
			}
			message.append("Was unable to find title information");
		}
		
		//if a message has been constructed there were errors
		if (error){
			log.logError(source, message.toString());
			return null;
		}
		
		return article;
	}
	
	/**
	 * Returns all instances of text that is between quotation marks, or for the ending quote if a new line comes first that counts. This
	 * exception is due to the fact that news sources frequently forget to put in a ending quotation mark, but virtually never do quotes last more
	 * than one paragraph. So having that rule in place protects against mangling the quotes by getting off alignment.
	 * @param text is the String that is being parsed for substrings between start and end chars.
	 * @return List of all sub Strings in text that are between quotation marks, or a newline for end if that comes first.
	 */
	public static List<String> getQuotes(String text){
		List<String> ret = new ArrayList<String>();
		//search for the start char
		for (int i = 0; i < text.length(); i++){
			if (text.charAt(i) == '\"'){
				//start quotation has been found so now look for the end char, i+1 since you already know i is start can begin with next char
				for (int j = i + 1; j < text.length(); j++){
					//have to account for new line before quote I've never seen a quote longer than the <p> tag its in, but news sources forgetting
					//to have a ending " if the quote goes to the end of the paragraph is sadly quite common.
					if (text.charAt(j) == '\"' || text.charAt(j) == '\n'){
						ret.add(text.substring(i + 1, j));
						i = j;
						break;
					}
				}
			}
		}
		
		return ret;
	}
	
}
